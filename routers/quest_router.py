from aiogram import F, Router, types, Bot
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime
from aiogram.fsm.state import StatesGroup, State
from states import QuestStates
from database import get_db

import logging

quest_router = Router()
logger = logging.getLogger(__name__)

QUEST_COMPLIMENTS = {
    1: "–í–æ—Ç —ç—Ç–æ –∫–∞–¥—Ä! –¢–∞–∫–æ–π —Ä–∞–∫—É—Ä—Å —Å–º–æ–≥–ª–∏ –±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–≤–µ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–ø—É—Ç–Ω–∏–∫–∏ SR space!",
    2: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã! –≠—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–∞ –∫–∞—Ä—Ç—É GPS —Å—Ç–∞–≤–∏—Ç—å!",
    3: "–≠–∫—Å–ø–æ–Ω–∞—Ç –∫–∞–∫ –Ω–∞ –ø–æ–¥–±–æ—Ä! –ú—É–∑–µ–π –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–≤–æ–∏–º –≤—ã–±–æ—Ä–æ–º!",
    4: "–†–∞–∫–µ—Ç–∞ —É–¥–∞–ª–∞—Å—å! –ü—Ä—è–º–æ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!",
    5: "–í–æ—Ç —ç—Ç–æ —Ç–æ—á–Ω–æ—Å—Ç—å! –¢—ã —Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ–∫?",
    6: "–ó–∞–≥–∞–¥–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤!",
    7: "–ü–æ–ª—É—á–µ–Ω–æ! –í —Ç–µ–±–µ –∑–∞—Ä–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å!",
    8: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! SR Space –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!",
    9: "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã!",
    10: "–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –¶–£–ü!",
    11: "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –æ–¥–∏—Å—Å–µ—é!"
}


async def ask_continue_or_restart(message: types.Message, progress: dict):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_{progress['current_task']}")
    builder.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_confirm")
    builder.adjust(1)

    await message.answer(
        f"–ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –∑–∞–¥–∞–Ω–∏–µ {progress['current_task']} –≤ –≥–æ—Ä–æ–¥–µ {progress['city']}.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()

    )

                     # –°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@quest_router.message(F.text == "üó∫Ô∏è –ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É")
async def start_quest(message: types.Message, state: FSMContext):
    conn = await get_db()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = await conn.fetchrow(
            "SELECT current_task, city FROM user_progress WHERE user_id = $1",
            message.from_user.id
        )

        if progress:
            await state.update_data(
                current_task=progress['current_task'],
                city=progress['city']
            )
            await ask_continue_or_restart(message, progress)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
            await state.set_state(QuestStates.CONFIRM_RESET)
        else:
            await state.update_data(current_task=1)
            await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –ø—É—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏! üöÄ\n"
                            "\n"
                                "–¢–µ–±—è –∂–¥–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–ª–µ—á–Ω–æ–º—É –ø—É—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n" 
                                        "\n"
                            "–í–≤–µ–¥–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            await state.set_state(QuestStates.CITY_INPUT)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∫–≤–µ—Å—Ç–∞: {e}")
    finally:
        await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@quest_router.callback_query(F.data.startswith("continue_"))
async def handle_continue(callback: types.CallbackQuery, state: FSMContext):
    task_number = int(callback.data.split("_")[1])
    await callback.message.delete()
    await TASK_HANDLERS[task_number](callback.message, state)
    await callback.answer()


@quest_router.callback_query(F.data == "restart_confirm")
async def handle_restart_confirm(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="restart_final")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_restart")

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω!",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@quest_router.callback_query(F.data == "restart_final")
async def handle_restart_final(callback: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
    conn = await get_db()
    try:
        await conn.execute(
            "DELETE FROM user_progress WHERE user_id = $1",
            callback.from_user.id
        )
    finally:
        await conn.close()

    await state.clear()
    await callback.message.edit_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –ø—É—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏! üöÄ\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    )
    await state.set_state(QuestStates.CITY_INPUT)
    await callback.answer()

@quest_router.callback_query(F.data == "cancel_restart")
async def handle_cancel_restart(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer("–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def save_submission(user_id: int, task: int, data: dict, city: str, message: types.Message = None):
    conn = await get_db()
    try:
        await conn.execute(
            """INSERT INTO quest_submissions 
            (user_id, city, task_number, photo_id, answer, submission_time)
            VALUES ($1, $2, $3, $4, $5, $6)""",
            user_id,
            city,
            task,
            data.get('photo'),
            data.get('answer'),
            datetime.now()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if message:
            await send_admin_report(
                bot=message.bot,
                user_id=user_id,
                task_number=task,
                answer=data.get('answer'),
                photo_id=data.get('photo'),
                city=city
            )
    finally:
        await conn.close()


async def handle_generic_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_task = data['current_task']
    city = data['city']  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    await save_submission(
        user_id=message.from_user.id,
        task=current_task,
        data={'photo': message.photo[-1].file_id, 'answer': message.caption},
        city=city  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
    )


async def show_next_button(message: types.Message, current_task: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"next_{current_task}")

    await message.answer(
        "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é?",
        reply_markup=builder.as_markup()
    )


import logging
logger = logging.getLogger(__name__)


@quest_router.message(QuestStates.CITY_INPUT)
async def handle_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ—Ö–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, —Ä–∞–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!\n"
                        "–ú—ã –ø–æ—Å–µ—Ç–∏–º 6 –º–µ—Å—Ç, —Ä–µ—à–∏–º 5 –∑–∞–≥–∞–¥–æ–∫ –∏ –≤–º–µ—Å—Ç–µ –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –∫–æ—Å–º–æ—Å —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –ê –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Ç–µ–±—è –∂–¥–µ—Ç –ø–æ–¥–∞—Ä–æ–∫! –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?")
    builder = ReplyKeyboardBuilder()
    await start_task_1(message, state)


# –ó–∞–¥–∞–Ω–∏–µ 1 - –ü–∞–º—è—Ç–Ω–∏–∫
async def start_task_1(message: types.Message, state: FSMContext):
    await state.update_data(current_task=1)
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞—à–µ–ª –ø–∞–º—è—Ç–Ω–∏–∫ ‚úÖ")

    await message.answer(
        "–û–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª! ‚Äì –ò –≤–æ—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\n"
        "üóΩ –ó–∞–¥–∞–Ω–∏–µ 1: –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ü–∞–º—è—Ç–Ω–∏–∫\n"
        "–ù–∞–π–¥–∏ –≤ –≥–æ—Ä–æ–¥–µ –ø–∞–º—è—Ç–Ω–∏–∫ –∏–ª–∏ –º–æ–Ω—É–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞–º–∏ –∏–ª–∏ —É—á–µ–Ω—ã–º–∏.",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)  # –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
    )
    await state.set_state(QuestStates.TASK1_PHOTO)
# –ó–∞–¥–∞–Ω–∏–µ 1 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–æ—Ç–æ
@quest_router.message(QuestStates.TASK1_PHOTO, F.text == "–ù–∞—à–µ–ª –ø–∞–º—è—Ç–Ω–∏–∫ ‚úÖ")
async def handle_task1_button_press(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
    await message.answer("–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É –ø–∞–º—è—Ç–Ω–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤—å –µ–µ –º–Ω–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å: ¬´–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ –ø–∞–º—è—Ç–Ω–∏–∫–µ –∏ —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –¥–ª—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏?¬ª")

@quest_router.message(QuestStates.TASK1_PHOTO, F.photo)
async def handle_task1_photo(message: types.Message, state: FSMContext):
    try:
        await handle_generic_photo(message, state)
        await message.answer("–í–æ—Ç —ç—Ç–æ –∫–∞–¥—Ä! –¢–∞–∫–æ–π —Ä–∞–∫—É—Ä—Å —Å–º–æ–≥–ª–∏ –±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–≤–µ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–ø—É—Ç–Ω–∏–∫–∏ SR space!")
        data = await state.get_data()
        await save_submission(
            user_id=message.from_user.id,
            task=1,
            data={
                'photo': message.photo[-1].file_id,
                'answer': message.caption
            },
            city=data['city'],
            message=message  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bot
        )
        await start_task_2(message, state)  # <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@quest_router.message(QuestStates.TASK1_PHOTO)
async def handle_invalid_content(message: types.Message):
    """–õ–æ–≤–∏–º –≤—Å–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞–º—è—Ç–Ω–∏–∫–∞!")
# –ó–∞–¥–∞–Ω–∏–µ 2 - –£–ª–∏—Ü–∞
# –ó–∞–¥–∞–Ω–∏–µ 2 - –£–ª–∏—Ü–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
async def start_task_2(message: types.Message, state: FSMContext):
    await state.update_data(current_task=2)

    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞—à–µ–ª —É–ª–∏—Ü—É ‚úÖ")
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")

    await message.answer(
        "üåÉ –ó–∞–¥–∞–Ω–∏–µ 2: –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –£–ª–∏—Ü—ã\n"
        "–ù–∞–π–¥–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É–ª–∏—Ü—ã –∏–ª–∏ –ø–µ—Ä–µ—É–ª–∫–∏, –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ –≤ —á–µ—Å—Ç—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ –∏–ª–∏ —É—á–µ–Ω—ã—Ö.",
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        )
    )
    await state.set_state(QuestStates.TASK2_PHOTO)
    logger.debug("–ó–∞–¥–∞–Ω–∏–µ 2: —Å–æ—Å—Ç–æ—è–Ω–∏–µ TASK2_PHOTO —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# 2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 2
@quest_router.message(QuestStates.TASK2_PHOTO, F.photo)
async def handle_task2_photo(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        # await handle_generic_photo(message, state)

        await save_submission(
            user_id=message.from_user.id,
            task=2,
            data={'photo': message.photo[-1].file_id},
            city=(await state.get_data())['city'],
            message=message
        )
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await message.answer(
            "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å: ¬´–ö—Ç–æ –¥–∞–ª –∏–º—è —ç—Ç–æ–π —É–ª–∏—Ü–µ –∏ —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –¥–ª—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏?¬ª",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        )
        await state.set_state(QuestStates.TASK2_TEXT)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 2: {e}")
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
@quest_router.message(QuestStates.TASK2_PHOTO, F.text == "–ù–∞—à–µ–ª —É–ª–∏—Ü—É ‚úÖ")
async def handle_task2_button(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"""
    await message.answer("üì∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É–ª–∏—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")


@quest_router.message(QuestStates.TASK2_TEXT)
async def handle_task2_text(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 2: {message.text}")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        data = await state.get_data()
        await save_submission(
            user_id=message.from_user.id,
            task=2,
            data={'answer': message.text},  # –£–±—Ä–∞–Ω–æ –ø–æ–ª–µ photo
            city=data['city'],
            message=message
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        await show_next_button(message, 2)
        logger.debug("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∫–Ω–æ–ø–∫–∞ '–î–∞–ª–µ–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
# –ó–∞–¥–∞–Ω–∏–µ 3 - –ú—É–∑–µ–π
async def start_task_3(message: types.Message, state: FSMContext):
    await state.update_data(current_task=3)

    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞—à–µ–ª —ç–∫—Å–ø–æ–Ω–∞—Ç ‚úÖ")
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")

    await message.answer(
        "üèõÔ∏è –ó–∞–¥–∞–Ω–∏–µ 3: –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –í—ã—Å—Ç–∞–≤–∫–∞\n"
        "–ù–∞–π–¥–∏ –∫–ª—é—á–µ–≤–æ–π —ç–∫—Å–ø–æ–Ω–∞—Ç –∏ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(QuestStates.TASK3_PHOTO)
    logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ TASK3_PHOTO —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

@quest_router.message(QuestStates.TASK3_PHOTO, F.text == "–ù–∞—à–µ–ª —ç–∫—Å–ø–æ–Ω–∞—Ç ‚úÖ")
async def handle_task3_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"""
    await message.answer("üì∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —ç–∫—Å–ø–æ–Ω–∞—Ç–∞.")


@quest_router.message(QuestStates.TASK3_PHOTO, F.photo)
async def handle_task3_photo(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        await handle_generic_photo(message, state)

        data = await state.get_data()
        await save_submission(
            user_id=message.from_user.id,
            task=3,
            data={
                'photo': message.photo[-1].file_id,
                'answer': message.caption
            },
            city=data['city'],
            message=message
        )

        await show_next_button(message, 3)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏—è 3: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ó–∞–¥–∞–Ω–∏–µ 4 - –†–∞–∫–µ—Ç—ã
async def start_task_4(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞—à–µ–ª —Ä–∞–∫–µ—Ç—ã ‚úÖ")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ adjust (—Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    builder.adjust(1, 1)  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –≤—ã—Ö–æ–¥ –≤–æ –≤—Ç–æ—Ä–æ–º

    await message.answer(
        "‚öôÔ∏è –ó–∞–¥–∞–Ω–∏–µ 4: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "–û—Ç—ã—â–∏ –≤ –º—É–∑–µ–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –º–∞–∫–µ—Ç —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –∏ —Å–∞–º–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∫–µ—Ç—ã.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(QuestStates.TASK4_PHOTO)

@quest_router.message(QuestStates.TASK4_PHOTO, F.text == "–ù–∞—à–µ–ª —Ä–∞–∫–µ—Ç—ã ‚úÖ")
async def handle_task4_button(message: types.Message):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–∫–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é ¬´–°—Ç–∞—Ä–∞—è vs –ù–æ–≤–∞—è¬ª")


@quest_router.message(QuestStates.TASK4_PHOTO, F.photo)
async def handle_task4_photo(message: types.Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await state.update_data(task4_photo=message.photo[-1].file_id)

    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –≤ —á–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∫–µ—Ç–∞ –ª—É—á—à–µ —Å—Ç–∞—Ä–æ–π?",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(QuestStates.TASK4_TEXT)


@quest_router.message(QuestStates.TASK4_TEXT)
async def handle_task4_text(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        state_data = await state.get_data()
        photo_file_id = state_data.get('task4_photo')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await save_submission(
            user_id=message.from_user.id,
            task=4,
            data={
                'photo': photo_file_id,  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                'answer': message.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.text –≤–º–µ—Å—Ç–æ caption
            },
            city=data['city'],
            message=message
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚û°Ô∏è", callback_data="next_4")

        await message.answer(
            "üöÄ –û—Ç–ª–∏—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä!",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ 4: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# –ó–∞–¥–∞–Ω–∏–µ 5 - –°–ø—É—Ç–Ω–∏–∫
async def start_task_5(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞—à–µ–ª ‚úÖ")
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")

    await message.answer(
        "üåå –ó–∞–¥–∞–Ω–∏–µ 5: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∑–≤–µ–∑–¥\n"
        "–ò—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É /map, –Ω–∞–π–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø—É—Ç–Ω–∏–∫–∞ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —ç–∫—Ä–∞–Ω",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QuestStates.TASK5_PHOTO)

@quest_router.message(QuestStates.TASK5_PHOTO, F.text == "–ù–∞—à–µ–ª ‚úÖ")
async def handle_task5_button(message: types.Message):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")

@quest_router.message(QuestStates.TASK5_PHOTO, F.photo)
async def handle_task5_photo(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    await save_submission(
        user_id=message.from_user.id,
        task=5,
        data={'photo': message.photo[-1].file_id},
        city=(await state.get_data())['city']
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è !",
        reply_markup=types.ReplyKeyboardRemove()
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚û°Ô∏è", callback_data="next_6")
    await show_next_button(message, 5)
    await state.set_state(QuestStates.TASK4_TEXT)


# –ó–∞–¥–∞–Ω–∏–µ 6 - –ó–∞–≥–∞–¥–∫–∞
async def start_task_6(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùì–ó–∞–¥–∞–Ω–∏–µ 6: –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ó–∞–≥–∞–¥–∫–∞\n\n"
        "–†–µ—à–∏ –∑–∞–≥–∞–¥–∫—É –æ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—Ç–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Å—è —Ç—É–¥–∞:\n"
        "\n"
        "–í —Ö—Ä–∞–º–µ –º—É–¥—Ä–æ—Å—Ç–∏, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–ø—è—Ç,\n"
        "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –º—ã—Å–ª–∏, –≥–¥–µ —Å–µ–∫—Ä–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç.\n"
        "–ù–µ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω–µ –≤ –∑–∞–ª–µ —Å–ª–∞–≤—ã,\n"
        "–ê –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –ø—Ä–æ—à–ª–æ–µ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è.\n\n"
        "–ï–≥–æ —Å—Ç–µ–Ω—ã ‚Äî —ç—Ç–æ –≤–æ—Ä–æ—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–µ,\n"
        "–ê –ø–æ–ª–∫–∏ ‚Äî —ç—Ç–æ –º–æ—Å—Ç—ã –≤ –±—É–¥—É—â–µ–µ.\n"
        "–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –∏—Å—Ç–æ—Ä–∏–∏ –æ –∑–≤–µ–∑–¥–∞—Ö –∏ –∑–µ–º–ª–µ,\n"
        "–ò –æ —Ç–æ–º, –∫–∞–∫ –ª—é–¥–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—Å–æ—Ç"
    )
    await state.set_state(QuestStates.TASK6_ANSWER)


@quest_router.message(QuestStates.TASK6_ANSWER)
async def handle_task6_answer(message: types.Message, state: FSMContext):
    if message.text.lower() == "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞" or "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞":
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        state_data = await state.get_data()
        photo_file_id = state_data.get('task4_photo')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await save_submission(
            user_id=message.from_user.id,
            task=4,
            data={
                'photo': photo_file_id,  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                'answer': message.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.text –≤–º–µ—Å—Ç–æ caption
            },
            city=data['city'],
            message=message
        )
        await show_next_button(message, 6)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")


# –ó–∞–¥–∞–Ω–∏–µ 7 - –ó–∞–≥–∞–¥–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
async def start_task_7(message: types.Message, state: FSMContext):
    await message.answer(
        "üìö –ó–∞–¥–∞–Ω–∏–µ 7: –°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ—Å–º–æ—Å–∞ –∏ –∏—Å—Ç–∏–Ω—ã –æ –Ω–µ–º\n\n"
        "–¢–µ–±—è —É–∂–µ –∂–¥—É—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!\n"
        "–ù–∞–π–¥–∏ —Ä–∞–∑–¥–µ–ª –æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–Ω–∏–≥—É –æ –∫–æ—Å–º–æ—Å–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –æ —á–µ–º –æ–Ω–∞. –õ—É—á—à–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥ —è –ø–µ—Ä–µ–¥–∞—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ, –∞ –∞–≤—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–∞—Ä–æ–∫, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è!"
    )
    await state.set_state(QuestStates.TASK7_ANSWER)

@quest_router.message(QuestStates.TASK7_ANSWER)
async def handle_task7_answer(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–ª—É—á–µ–Ω–æ! –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ –≤—ã—à–ª–æ! –ü–æ—Ö–æ–∂–µ, –≤ —Ç–µ–±–µ –∑–∞—Ä–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤!")
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    state_data = await state.get_data()
    photo_file_id = state_data.get('task4_photo')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_submission(
        user_id=message.from_user.id,
        task=4,
        data={
            'photo': photo_file_id,  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            'answer': message.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.text –≤–º–µ—Å—Ç–æ caption
        },
        city=data['city'],
        message=message
    )
    await show_next_button(message, 7)
    await state.set_state(QuestStates.TASK8_ANSWER)


# –ó–∞–¥–∞–Ω–∏–µ 8 - –ö–æ–º–ø–∞–Ω–∏—è
# –ó–∞–¥–∞–Ω–∏–µ 8 - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ñ–æ—Ç–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
async def start_task_8(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    await message.answer(
        "–ó–∞–¥–∞–Ω–∏–µ 8: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∫–µ\n\n"
        "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ–µ–º–Ω–∏–∫–æ–º —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è, —Å—Ç–∞–≤—è—â–∞—è —Å–≤–æ–µ–π –º–∏—Å—Å–∏–µ–π ‚Äî —Å–¥–µ–ª–∞—Ç—å –∫–æ—Å–º–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–µ—à—å —É–≥–∞–¥–∞—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ?\n",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True))
    await state.set_state(QuestStates.TASK8_ANSWER)

@quest_router.message(QuestStates.TASK8_ANSWER)
async def handle_task8_answer(message: types.Message, state: FSMContext):
    user_answer = message.text.strip().lower()

    if user_answer in {"sr space", "srspace", "—Å—Ä —Å–ø–µ–π—Å"}:
        await message.answer(
            "–í–µ—Ä–Ω–æ !\n\nüì∏ –ù–µ –ø–æ–∫–∏–¥–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –Ω–∞–π–¥–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–≥–ª–∞ –±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –∫–Ω–∏–≥–∞ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –Ω–∞—à–µ–≥–æ —Å—Ç–æ–ª–µ—Ç–∏—è, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π, –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(QuestStates.TASK8_PHOTO)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ! üîç")

@quest_router.message(QuestStates.TASK8_PHOTO, F.photo)
async def handle_task8_photo(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    state_data = await state.get_data()
    photo_file_id = state_data.get('task4_photo')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_submission(
        user_id=message.from_user.id,
        task=4,
        data={
            'photo': photo_file_id,  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            'answer': message.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.text –≤–º–µ—Å—Ç–æ caption
        },
        city=data['city'],
        message=message
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚û°Ô∏è", callback_data="next_8")

    await message.answer(
        "üì∏ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ò–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –º—ã —Ä–∞–∑–º–µ—Å—Ç–∏–º –∫–Ω–∏–≥—É –æ –Ω–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö!",
        reply_markup=builder.as_markup()
    )


# –ó–∞–¥–∞–Ω–∏–µ 9 - –§–æ—Ç–æ –∫–Ω–∏–≥–∏
async def start_task_9(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

    await message.answer(
        "üõ∞Ô∏è –ó–∞–¥–∞–Ω–∏–µ 10: –ë—É–¥—É—â–µ–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: SR Space ‚Äì —á–∞—Å—Ç–Ω–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫—É—é —á–∞—Å—Ç–Ω—É—é –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫—É –∏ –≤–Ω–µ–¥—Ä—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Å—Ñ–µ—Ä—É –∫–æ—Å–º–æ—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏ –Ω–∞ –ó–µ–º–ª–µ.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –æ —Å–∞–º—ã—Ö –≤–µ—Å–æ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏. –¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏: \n\n"
        "https://srspace.ru/en\n\n"
        "https://t.me/srspaceru\n\n"
        "https://vk.com/srspaceru\n",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QuestStates.TASK9_TEXT)


@quest_router.message(QuestStates.TASK9_TEXT)
async def handle_task9_text(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    state_data = await state.get_data()
    photo_file_id = state_data.get('task4_photo')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_submission(
        user_id=message.from_user.id,
        task=4,
        data={
            'photo': photo_file_id,  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            'answer': message.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: message.text –≤–º–µ—Å—Ç–æ caption
        },
        city=data['city'],
        message=message
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    responses = [
        "SR Space –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π, –≤–∫–ª—é—á–∞—è –∑–∞–ø—É—Å–∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤. –ö–æ–º–ø–∞–Ω–∏—è —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –º–∏—Ä–∞.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∫–æ–º–ø–∞–Ω–∏–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ü–µ–Ω–∫–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∫–ª–∏–º–∞—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä –ø–æ —Å–º—è–≥—á–µ–Ω–∏—é –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É.\n\n"
        "–ï—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ —Ç—ã —É–∑–Ω–∞–µ—à—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ",
        "–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
        "–ü—Ä–∏ –ø–æ–º–æ—â–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö –∏ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n\n"
        "–ê –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–∞—è –∏–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–ª—å–∑–æ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö, –≤–∫–ª—é—á–∞—è —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –∏ –æ—Ö—Ä–∞–Ω—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.\n\n"
        "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´SR Space¬ª –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–≤—è–∑–∏.",
    ]

    for text in responses:
        await message.answer(text) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–Ω–∞–ª—É ‚û°Ô∏è", callback_data="next_9")

    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö!",
        reply_markup=builder.as_markup()
    )


# –ó–∞–¥–∞–Ω–∏–µ 10 - –û—Ç—á–µ—Ç
async def start_task_10(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()

    await message.answer(
        "–ó–∞–¥–∞–Ω–∏–µ 10: –°–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ\n"
        "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –Ω–∏–º (–Ω–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –ª—é–¥–µ–π)",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QuestStates.TASK10_REPORT)


@quest_router.message(QuestStates.TASK10_REPORT, F.photo)
async def handle_task10_photo(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    await save_submission(
        user_id=message.from_user.id,
        task=10,
        data={'photo': message.photo[-1].file_id},
        city=(await state.get_data())['city']
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        "–≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞‚Ä¶",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–Ø –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞! –ò –≤ –∫–æ–Ω—Ü–µ —ç—Ç–æ–≥–æ –ø—É—Ç–∏ —è —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ä–µ–¥–∫–∏–º–∏ —Å–∏—è—é—â–∏–º–∏ –∑–≤–µ–∑–¥–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –æ–∫—Ä—É–∂–∞—é—Ç –∏ –¥–æ—Ä–æ–∂–∞—Ç —Ç–æ–±–æ–π, –∞ –∫–æ—Å–º–æ—Å–æ–º ‚Äì –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–∏—à–µ—Ç–µ –≤–º–µ—Å—Ç–µ. –°–µ–π—á–∞—Å –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è SR Space –ø–∏—à–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏, –ø–µ—Ä–µ–Ω–∏–º–∞—è –ª—É—á—à–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ø—Ä–µ–µ–º—Å—Ç–≤—É—è –ø—É—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –∏ –¥–æ—Ä–æ–∂–∞ –∫–∞–∂–¥—ã–º, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å.",
        reply_markup=types.ReplyKeyboardRemove()
    )

    conn = await get_db()
    try:
        await conn.execute(
            "UPDATE users SET points = points + 30 WHERE id = $1",
            message.from_user.id
        )

        await conn.execute(
            "DELETE FROM user_progress WHERE user_id = $1",
            message.from_user.id
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º
        admins = await conn.fetch("SELECT id FROM users WHERE role = 'admin'")
        for admin in admins:
            await message.bot.send_message(
                admin['id'],
                f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–µ—Å—Ç!"
            )
    finally:
        await conn.close()

    from main import main_menu_kb

    await message.answer(
        "üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
        reply_markup=main_menu_kb()  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    )
    await state.clear()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    builder = ReplyKeyboardBuilder()
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    await state.set_state(QuestStates.QUEST_COMPLETED)
    await state.clear()  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
TASK_HANDLERS = {
    1: start_task_1,
    2: start_task_2,
    3: start_task_3,
    4: start_task_4,
    5: start_task_5,
    6: start_task_6,
    7: start_task_7,
    8: start_task_8,
    9: start_task_9,
    10: start_task_10,
}


@quest_router.callback_query(F.data.startswith("next_"))
async def handle_next(callback: types.CallbackQuery, state: FSMContext):
    try:
        current_task = int(callback.data.split("_")[1])
        next_task = current_task + 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        data = await state.get_data()
        conn = await get_db()
        await conn.execute(
            """INSERT INTO user_progress (user_id, current_task, city)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO UPDATE 
            SET current_task = $2, city = $3""",
            callback.from_user.id, next_task, data['city']
        )

        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = TASK_HANDLERS.get(next_task)
        if handler:
            await handler(callback.message, state)
        else:
            await finish_quest(callback.message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
async def finish_quest(message: types.Message, state: FSMContext):
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    conn = await get_db()
    try:
        await conn.execute(
            "UPDATE users SET points = points + 30 WHERE id = $1",
            message.from_user.id
        )

        await conn.execute(
            "DELETE FROM user_progress WHERE user_id = $1",
            message.from_user.id
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º
        admins = await conn.fetch("SELECT id FROM users WHERE role = 'admin'")
        for admin in admins:
            await message.bot.send_message(
                admin['id'],
                f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–µ—Å—Ç!"
            )
    finally:
        await conn.close()

    await message.answer("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    await state.clear()

def get_exit_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    return builder.as_markup(resize_keyboard=True)

@quest_router.message(F.text == "üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
async def exit_to_menu(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    data = await state.get_data()
    current_task = data.get('current_task', 1)
    city = data.get('city', 'unknown')

    conn = await get_db()
    try:
        await conn.execute(
            """INSERT INTO user_progress (user_id, current_task, city)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO UPDATE 
            SET current_task = $2, city = $3""",
            message.from_user.id, current_task, city
        )
    finally:
        await conn.close()
    from main import main_menu_kb
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ.",
                         reply_markup=main_menu_kb())
    await state.clear()

async def send_admin_report(
    bot: Bot,
    user_id: int,
    task_number: int,
    answer: str = None,
    photo_id: str = None,
    city: str = None
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        conn = await get_db()
        user = await conn.fetchrow(
            "SELECT username FROM users WHERE id = $1",
            user_id
        )
        username = user['username'] if user else "–ê–Ω–æ–Ω–∏–º"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        report_text = (
            "üìä *–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é*\n"
            f"‚ñ™Ô∏è –Æ–∑–µ—Ä: @{username} ([{user_id}](tg://user?id={user_id}))\n"
            f"‚ñ™Ô∏è –ì–æ—Ä–æ–¥: {city or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚ñ™Ô∏è –ó–∞–¥–∞–Ω–∏–µ: #{task_number}\n"
        )

        if answer:
            report_text += f"üìù –û—Ç–≤–µ—Ç: {answer}\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = await conn.fetch(
            "SELECT id FROM users WHERE role = 'admin'"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        for admin in admins:
            try:
                if photo_id:
                    await bot.send_photo(
                        chat_id=admin['id'],
                        photo=photo_id,
                        caption=report_text,
                        parse_mode="Markdown"
                    )
                else:
                    await bot.send_message(
                        chat_id=admin['id'],
                        text=report_text,
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin['id']}: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
    finally:
        await conn.close()