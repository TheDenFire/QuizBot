import logging
import os
import urllib

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, or_f
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
POSTGRES_URI = os.getenv("POSTGRESURL")
DB_USER = os.getenv("DATABASE_USER")
DB_PASSWORD = os.getenv("DATABASE_PASSWORD")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

class SurveyStates(StatesGroup):
    QUESTION = State()


async def get_db():
    try:
        conn = await asyncpg.connect(
            dsn=POSTGRES_URI,
            user=DB_USER,
            password=DB_PASSWORD,
            timeout=10  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_kb():
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üõ∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
        "üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
        "üó∫Ô∏è –ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É",
        "üéì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ",
        "üèÖ –ü—Ä–æ—Ñ–∏–ª—å"
    ]
    for btn in buttons:
        builder.add(types.KeyboardButton(text=btn))
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""

    conn = await get_db()
    try:
        await conn.execute(
            "INSERT INTO users (id, username) VALUES ($1, $2) "
            "ON CONFLICT (id) DO NOTHING",
            user_id, username
        )
    finally:
        await conn.close()

    welcome_text = (
        "üöÄ –ü—Ä–∏–≤–µ—Ç, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üöÄ\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç SR space, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–ø—ç–π—Å–∏! –û—Ç –ª–∏—Ü–∞ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ—Å–º–æ—Å –±–ª–∏–∂–µ –¥–ª—è —Ç–µ–±—è.\n"
        "üîπ /map ‚Äî –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ üõ∞\n"
        "üîπ /news ‚Äî –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ—Å–º–æ—Å–µ üì∞\n"
        "üîπ /eco ‚Äî –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –∏ –∫–ª–∏–º–∞—Ç–µ üåç\n"
        "üîπ /quest ‚Äî –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ —Ç–≤–æ–µ–º—É –≥–æ—Ä–æ–¥—É üó∫Ô∏è\n"
        "üîπ /quiz ‚Äî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ üéì\n"
        "üîπ /profile ‚Äî –¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üèÖ"
    )

    await message.answer(welcome_text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu_kb()
    )
    await state.clear()


@dp.message(or_f(F.text == "üèÖ –ü—Ä–æ—Ñ–∏–ª—å", Command("profile")))
async def show_profile(message: types.Message):
    await show_user_profile(message.from_user.id, message)


async def show_user_profile(user_id: int, message: types.Message):
    conn = await get_db()
    try:
        user = await conn.fetchrow(
            "SELECT username, points FROM users WHERE id = $1",
            user_id
        )
    except Exception as e:
        logger.error(f"Database error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    finally:
        await conn.close()

    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –¢–æ–ø-5 —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_rating")

    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚ñ´Ô∏è –ò–º—è: {user['username'] or '–≥–æ—Å—Ç—å'}\n"
        f"‚ñ´Ô∏è –ë–∞–ª–ª—ã: {user['points']}"
    )

    await message.answer(
        profile_text,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "show_rating")
async def show_rating(callback: types.CallbackQuery):
    try:
        conn = await get_db()
        top_users = await conn.fetch(
            "SELECT username, points FROM users ORDER BY points DESC LIMIT 5"
        )
    except Exception as e:
        logger.error(f"Rating error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        return
    finally:
        await conn.close()

    if not top_users:
        await callback.message.answer("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, user in enumerate(top_users, 1):
        username = user['username'] or "–ê–Ω–æ–Ω–∏–º"
        rating_text += f"{i}. {username} - ‚≠ê {user['points']} –±–∞–ª–ª–æ–≤\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer(rating_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text.in_({
    "üõ∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
    "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
    "üó∫Ô∏è –ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É"
}))
async def handle_buttons(message: types.Message):
    await message.answer("TODO ‚è≥", reply_markup=main_menu_kb())


@dp.message(SurveyStates.QUESTION)
async def process_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with await get_db() as conn:
        await conn.execute(
            "UPDATE users SET points = points + 1 WHERE id = $1",
            user_id
        )

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –í–∞—à –±–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu_kb())
    await state.clear()


class QuizStates(StatesGroup):
    CATEGORY_SELECTION = State()
    ANSWERING_QUESTION = State()


quiz_categories = {
    "satellites": {
        "title": "üõ∞ –°–ø—É—Ç–Ω–∏–∫–∏ –∏ –º–∏—Å—Å–∏–∏",
        "questions": [
            {
                "question": "–ö–∞–∫–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º–∞–ª—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ó–µ–º–ª–∏?",
                "options": ["1Ô∏è‚É£ –†–æ—Å–∫–æ—Å–º–æ—Å", "2Ô∏è‚É£ SR Space", "3Ô∏è‚É£ –°–∫–æ–ª–∫–æ–≤–æ.", "4Ô∏è‚É£ Glavkosmos."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ SR Space \n SR Space —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            },
            {
                "question": "–ö–∞–∫–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –≤ 1990 –≥–æ–¥—É, —Å—Ç–∞–ª —Å–∏–º–≤–æ–ª–æ–º –≥–ª—É–±–æ–∫–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π?",
                "options": ["1Ô∏è‚É£ –ö–µ–ø–ª–µ—Ä", "2Ô∏è‚É£ –•–∞–±–±–ª", "3Ô∏è‚É£ –î–∂–µ–π–º—Å –£—ç–±–±.", "4Ô∏è‚É£ –ß–∞–Ω–¥—Ä–∞."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –•–∞–±–±–ª \n –•–∞–±–±–ª –¥–æ —Å–∏—Ö –ø–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–π."
            },
            {
                "question": "–ö–∞–∫–∞—è –º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∏–ª–∞ –ø–µ—Ä–≤—ã—Ö –ª—é–¥–µ–π –Ω–∞ –õ—É–Ω—É –≤ 1969 –≥–æ–¥—É?",
                "options": ["1Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-11", "2Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-13", "3Ô∏è‚É£ –í–æ—è–¥–∂–µ—Ä-1.", "4Ô∏è‚É£ –ú–∞—Ä–∏–Ω–µ—Ä-10."],
                "correct": 0,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-11 \n –ê–ø–æ–ª–ª–æ–Ω-11 —Å—Ç–∞–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ä—ã–≤–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –ª—É–Ω—ã –∏ –∫–æ—Å–º–æ—Å–∞."
            }
        ]
    },
    "ecology": {
        "title": "üåç –ó–µ–º–ª—è –∏ —ç–∫–æ–ª–æ–≥–∏—è",
        "questions": [
            {
                "question": " –ö–∞–∫–æ–π –≥–∞–∑ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∏–Ω–æ–≤–Ω–∏–∫–æ–º –ø–∞—Ä–Ω–∏–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞?",
                "options": ["1Ô∏è‚É£ –ö–∏—Å–ª–æ—Ä–æ–¥", "2Ô∏è‚É£ –ê–∑–æ—Ç", "3Ô∏è‚É£ –£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑.", "4Ô∏è‚É£ –í–æ–¥–æ—Ä–æ–¥."],
                "correct": 2,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ \n –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ CO‚ÇÇ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—é."
            },
            {
                "question": "–ö–∞–∫—É—é —Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, SR Space, –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ?",
                "options": ["1Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–æ–¥—è—Ç —Å–æ–ª–Ω–µ—á–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é", "2Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –ª–µ—Å–Ω—ã–µ –ø–æ–∂–∞—Ä—ã", "3Ô∏è‚É£ –ú–æ–¥–µ–ª–∏—Ä—É—é—Ç –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä—è—é—Ç –≥–ª—É–±–∏–Ω—É –æ–∫–µ–∞–Ω–æ–≤."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –ª–µ—Å–Ω—ã–µ –ø–æ–∂–∞—Ä—ã \n –¢–∞–∫–∏–µ —Å–ø—É—Ç–Ω–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–æ—Å–∞—Ö CO‚ÇÇ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∞–≥–æ–≤ –ø–æ–∂–∞—Ä–æ–≤."
            },
            {
            "question": " –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º?",
                "options": ["1Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã", "2Ô∏è‚É£ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."],
                "correct": 2,
                "explanation": "‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ \n –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ NDVI, –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –≤–µ–≥–µ—Ç–∞—Ü–∏–∏."
            }
        ]
    },
     "rokets": {
        "title": "üöÄ –†–∞–∫–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "questions": [
            {
                "question": " –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞–∫–µ—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π SpaceX?",
                "options": ["1Ô∏è‚É£ Falcon 1", "2Ô∏è‚É£ Falcon 9", "3Ô∏è‚É£ Falcon Heavy.", "4Ô∏è‚É£ Starship."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ Falcon 9 \n –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ—Å—Ç—å Falcon 9 –ø–æ–∑–≤–æ–ª–∏–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–ø—É—Å–∫–∏."
            },
            {
                "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∫–µ—Ç–∞-–Ω–æ—Å–∏—Ç–µ–ª—å, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π SR Space –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞–ª—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Ä–±–∏—Ç—É?",
                "options": ["1Ô∏è‚É£ –°–®–ê", "2Ô∏è‚É£ –°–°–°–†", "3Ô∏è‚É£ –ö–∏—Ç–∞–π", "4Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –°–°–°–† \n –°–°–°–† –ª–∏–¥–∏—Ä–æ–≤–∞–ª –≤ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–∫–µ—Ç–æ—Å—Ç—Ä–æ–µ–Ω–∏—è."
            },
            {
            "question": " –ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –ø–µ—Ä–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –º–µ–∂–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—É—é –±–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∫–µ—Ç—É?",
                "options": ["1Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã", "2Ô∏è‚É£ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."],
                "correct": 2,
                "explanation": "‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ \n –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ NDVI, –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –≤–µ–≥–µ—Ç–∞—Ü–∏–∏."
            }
        ]
    }
}


@dp.message(F.text == "üéì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ")
async def start_quiz(message: types.Message, state: FSMContext):
    await state.update_data(
        used_categories=[],
        current_category=None,
        last_message_id=None
    )
    await show_category_selection(message, state)


async def show_category_selection(message: types.Message, state: FSMContext):
    data = await state.get_data()
    builder = InlineKeyboardBuilder()

    for category_id, category in quiz_categories.items():
        if category_id not in data.get('used_categories', []):
            encoded_id = urllib.parse.quote_plus(category_id)
            builder.button(
                text=category["title"],
                callback_data=f"cat_{encoded_id}"
            )

    builder.adjust(1)

    try:
        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" + ("\n\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã" if data.get('used_categories') else "")

        if data.get('last_message_id'):
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=text,
                reply_markup=builder.as_markup()
            )
        else:
            msg = await message.answer(text, reply_markup=builder.as_markup())
            await state.update_data(last_message_id=msg.message_id)

        await state.set_state(QuizStates.CATEGORY_SELECTION)

    except Exception as e:
        logger.error(f"Error showing categories: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

@dp.callback_query(QuizStates.ANSWERING_QUESTION, F.data.startswith("ans_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data['current_category']
        question_index = data['current_question_index']

        category = quiz_categories[category_id]
        question = category["questions"][question_index]

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.error(f"Error removing buttons: {str(e)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        selected_answer = int(callback.data.split("_")[1])
        is_correct = selected_answer == question["correct"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
        if is_correct:
            conn = await get_db()
            try:
                await conn.execute(
                    "UPDATE users SET points = points + 1 WHERE id = $1",
                    callback.from_user.id
                )
            finally:
                await conn.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        explanation = (
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª üéâ\n{question['explanation']}"
            if is_correct else
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct']]}\n{question['explanation']}"
        )
        await callback.message.answer(explanation)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if is_correct:
            await state.update_data(current_question_index=question_index + 1)
            await ask_current_question(callback.message, state)
        else:
            await complete_category(callback.message, state)

        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling answer: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")


async def get_user_points(user_id: int) -> int:
    conn = await get_db()
    try:
        result = await conn.fetchval(
            "SELECT points FROM users WHERE id = $1",
            user_id
        )
        return result or 0
    finally:
        await conn.close()


async def complete_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    used = data.get('used_categories', [])
    category_id = data['current_category']

    if category_id not in used:
        used.append(category_id)
        await state.update_data(
            used_categories=used,
            current_category=None,
            current_question_index=0
        )

    await show_category_selection(message, state)


@dp.callback_query(QuizStates.CATEGORY_SELECTION, F.data.startswith("cat_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º category_id
        encoded_category = callback.data.split("_", 1)[1]
        category_id = urllib.parse.unquote_plus(encoded_category)

        logger.debug(f"Selected category ID: {category_id}")

        if category_id not in quiz_categories:
            logger.error(f"Category {category_id} not found in quiz_categories")
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_category=category_id,
            current_question_index=0,
            last_message_id=None
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await ask_current_question(callback.message, state)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in select_category: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def ask_first_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = quiz_categories[data['current_category']]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(category["questions"][0]["options"]):
        builder.button(text=option, callback_data=f"ans_{i}")

    builder.adjust(1)

    msg = await message.answer(
        f"üìö {category['title']}\n\n"
        f"‚ùì {category['questions'][0]['question']}",
        reply_markup=builder.as_markup()
    )
    await state.update_data(
        question_index=0,
        last_message_id=msg.message_id
    )
    await state.set_state(QuizStates.ANSWERING_QUESTION)


async def ask_current_question(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data['current_category']
        question_index = data['current_question_index']

        category = quiz_categories[category_id]
        questions = category["questions"]

        if question_index >= len(questions):
            await complete_category(message, state)
            return

        question = questions[question_index]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, option in enumerate(question["options"]):
            builder.button(text=option, callback_data=f"ans_{i}")
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        text = (
            f"üìö {category['title']}\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å {question_index + 1}/{len(questions)}:\n"
            f"{question['question']}"
        )

        msg = await message.answer(text, reply_markup=builder.as_markup())
        await state.update_data(last_message_id=msg.message_id)
        await state.set_state(QuizStates.ANSWERING_QUESTION)

    except Exception as e:
        logger.error(f"Error asking question: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query(F.data.startswith("cat_"))
async def handle_category_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º category_id
        encoded_category = callback.data.split("_", 1)[1]
        category_id = urllib.parse.unquote_plus(encoded_category)

        logger.info(f"Selected category: {category_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id not in quiz_categories:
            logger.error(f"Category not found: {category_id}")
            await callback.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(QuizStates.ANSWERING_QUESTION)
        await state.update_data(
            current_category=category_id,
            current_question_index=0,
            used_categories=[]
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await ask_current_question(callback.message, state)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in category selection: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@dp.message()
async def unknown_message(message: types.Message):
    logger.warning(f"Unhandled message: {message.text}")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")


async def main():
    conn = await get_db()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username VARCHAR(255),
                points INTEGER DEFAULT 0
            )
        ''')
    finally:
        await conn.close()

    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())