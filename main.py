import os
import logging
import traceback
import urllib
from datetime import datetime
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, or_f, state
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiohttp import ClientError, TCPConnector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
POSTGRES_URI = os.getenv("POSTGRESURL")
DB_USER = os.getenv("DATABASE_USER")
DB_PASSWORD = os.getenv("DATABASE_PASSWORD")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

class SurveyStates(StatesGroup):
    QUESTION = State()


async def get_db():
    try:
        conn = await asyncpg.connect(
            dsn=POSTGRES_URI,
            user=DB_USER,
            password=DB_PASSWORD,
            timeout=10  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_kb():
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üõ∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
        "üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
        "üó∫Ô∏è –ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É",
        "üéì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ",
        "üèÖ –ü—Ä–æ—Ñ–∏–ª—å"
    ]
    for btn in buttons:
        builder.add(types.KeyboardButton(text=btn))
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""

    conn = await get_db()
    try:
        await conn.execute(
            "INSERT INTO users (id, username) VALUES ($1, $2) "
            "ON CONFLICT (id) DO NOTHING",
            user_id, username
        )
    finally:
        await conn.close()

    welcome_text = (
        "üöÄ –ü—Ä–∏–≤–µ—Ç, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üöÄ\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç SR space, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–ø—ç–π—Å–∏! –û—Ç –ª–∏—Ü–∞ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ—Å–º–æ—Å –±–ª–∏–∂–µ –¥–ª—è —Ç–µ–±—è.\n"
        "üîπ /map ‚Äî –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ üõ∞\n"
        "üîπ /news ‚Äî –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ—Å–º–æ—Å–µ üì∞\n"
        "üîπ /eco ‚Äî –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –∏ –∫–ª–∏–º–∞—Ç–µ üåç\n"
        "üîπ /quest ‚Äî –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ —Ç–≤–æ–µ–º—É –≥–æ—Ä–æ–¥—É üó∫Ô∏è\n"
        "üîπ /quiz ‚Äî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ üéì\n"
        "üîπ /profile ‚Äî –¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üèÖ"
    )

    await message.answer(welcome_text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu_kb()
    )
    await state.clear()


@dp.message(or_f(F.text == "üèÖ –ü—Ä–æ—Ñ–∏–ª—å", Command("profile")))
async def show_profile(message: types.Message):
    await show_user_profile(message.from_user.id, message)


async def show_user_profile(user_id: int, message: types.Message):
    async with ChatActionSender.typing(
            chat_id=message.chat.id,
            bot=message.bot
    ):
        conn = await get_db()
    try:
        user = await conn.fetchrow(
            "SELECT username, points FROM users WHERE id = $1",
            user_id
        )
    except Exception as e:
        logger.error(f"Database error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    finally:
        await conn.close()

    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –¢–æ–ø-5 —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_rating")

    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚ñ´Ô∏è –ò–º—è: {user['username'] or '–≥–æ—Å—Ç—å'}\n"
        f"‚ñ´Ô∏è –ë–∞–ª–ª—ã: {user['points']}"
    )

    await message.answer(
        profile_text,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "show_rating")
async def show_rating(callback: types.CallbackQuery):
    try:
        conn = await get_db()
        top_users = await conn.fetch(
            "SELECT username, points FROM users ORDER BY points DESC LIMIT 5"
        )
    except Exception as e:
        logger.error(f"Rating error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        return
    finally:
        await conn.close()

    if not top_users:
        await callback.message.answer("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    rating_text = "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, user in enumerate(top_users, 1):
        username = user['username'] or "–ê–Ω–æ–Ω–∏–º"
        rating_text += f"{i}. {username} - ‚≠ê {user['points']} –±–∞–ª–ª–æ–≤\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer(rating_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text.in_({
    "üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
}))
async def handle_buttons(message: types.Message):
    await message.answer("TODO ‚è≥", reply_markup=main_menu_kb())


@dp.message(SurveyStates.QUESTION)
async def process_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with await get_db() as conn:
        await conn.execute(
            "UPDATE users SET points = points + 1 WHERE id = $1",
            user_id
        )

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –í–∞—à –±–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu_kb())
    await state.clear()


class QuizStates(StatesGroup):
    CATEGORY_SELECTION = State()
    ANSWERING_QUESTION = State()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class MapStates(StatesGroup):
    MAIN_MENU = State()
    SATELLITE_LIST = State()
    SATELLITE_INFO = State()


# –°–ø–∏—Å–æ–∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤

SATELLITES = {
    "voyager": {
        "name": "Voyager 1 (–í–æ—è–¥–∂–µ—Ä-1)",
        "description": (
            "Voyager 1 (–í–æ—è–¥–∂–µ—Ä-1) üåå\n"
            "üåç –û—Ä–±–∏—Ç–∞: –í—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (24 –º–ª—Ä–¥ –∫–º –æ—Ç –ó–µ–º–ª–∏)\n"
            "üìä –ú–∏—Å—Å–∏—è: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–ª—å–Ω–µ–≥–æ –∫–æ—Å–º–æ—Å–∞ –∏ –º–µ–∂–∑–≤–µ–∑–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞\n"
            "üì∑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: https://voyager.jpl.nasa.gov/\n"
            "\n"
            "üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ:(https://voyager.jpl.nasa.gov/)\n\n"
        )
    },
    "hubble": {
        "name": "Hubble Space Telescope (–•–∞–±–±–ª)",
        "description": (
            "üî≠ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø NASA\n\n"
            "‚Ä¢ –ó–∞–ø—É—â–µ–Ω –≤ 1990 –≥–æ–¥—É\n"
            "‚Ä¢ –î–∏–∞–º–µ—Ç—Ä –∑–µ—Ä–∫–∞–ª–∞: 2.4 –º\n"
            "‚Ä¢ –û—Ä–±–∏—Ç–∞: 547 –∫–º\n"
            "‚Ä¢ –°–¥–µ–ª–∞–ª >1.5 –º–ª–Ω –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"
        )
    },
    "webb": {
        "name": "James Webb Space Telescope (–î–∂–µ–π–º—Å –£—ç–±–±)",
        "description": (
            "üåü –ù–æ–≤–µ–π—à–∏–π –∏–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–ª–µ—Å–∫–æ–ø\n\n"
            "‚Ä¢ –ó–∞–ø—É—â–µ–Ω –≤ 2021 –≥–æ–¥—É\n"
            "‚Ä¢ –î–∏–∞–º–µ—Ç—Ä –∑–µ—Ä–∫–∞–ª–∞: 6.5 –º\n"
            "‚Ä¢ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: —Ç–æ—á–∫–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞ L2\n"
            "‚Ä¢ –ò–∑—É—á–∞–µ—Ç —Ä–∞–Ω–Ω—é—é –í—Å–µ–ª–µ–Ω–Ω—É—é"
        )
    }
}

def get_satellite_names():
    return [sat["name"] for sat in SATELLITES.values()]

def find_satellite_by_name(name: str):
    return next((sat for sat in SATELLITES.values() if sat["name"] == name), None)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–∞—Ä—Ç—ã
def map_menu_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫"))
    builder.add(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤"))
    builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def satellites_list_kb():
    builder = ReplyKeyboardBuilder()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤
    for sat in SATELLITES.values():
        builder.add(types.KeyboardButton(text=sat["name"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á "name"
    builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
@dp.message(F.text == "üõ∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞")
async def handle_space_map(message: types.Message, state: FSMContext):
    await state.set_state(MapStates.MAIN_MENU)
    await message.answer(
        "üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–ø—É—Ç–Ω–∏–∫–∏ SR Space –∏ –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã.",
        reply_markup=map_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫"
@dp.message(F.text == "–ù–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫")
async def search_satellite(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != MapStates.MAIN_MENU:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ä—Ç—ã")
        return

    await state.set_state(MapStates.SATELLITE_LIST)
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—É—Ç–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=satellites_list_kb()
    )


@dp.message(F.text.in_(get_satellite_names()), MapStates.SATELLITE_LIST)
async def show_satellite_info(message: types.Message, state: FSMContext):
    satellite = find_satellite_by_name(message.text)
    if not satellite:
        await message.answer("üö´ –°–ø—É—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await state.set_state(MapStates.SATELLITE_INFO)
    await state.update_data(current_satellite=satellite)

    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await message.answer(
        f"üõ∞ {satellite['name']}\n\n{satellite['description']}",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", MapStates.SATELLITE_INFO)
async def back_to_list(message: types.Message, state: FSMContext):
    await state.set_state(MapStates.SATELLITE_LIST)
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—É—Ç–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=satellites_list_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(F.text == "–ù–∞–∑–∞–¥", MapStates.SATELLITE_LIST)
async def back_to_map_menu(message: types.Message, state: FSMContext):
    await state.set_state(MapStates.MAIN_MENU)
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ä—Ç—ã:",
        reply_markup=map_menu_kb()
    )

@dp.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤", MapStates.MAIN_MENU)
async def handle_back_to_main_menu(message: types.Message, state: FSMContext):
    await state.set_state(MapStates.MAIN_MENU)
    await message.answer(
        "üõ∞ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤\n"
        "\n"
        "üîç –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
        "üì° –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è.\n"
        "\n"
        "üîóhttps://spacegid.com/media/space_sattelite/",
        reply_markup=main_menu_kb()
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb()
    )

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
@dp.message(F.text.in_({"üõ∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"}))
async def handle_buttons(message: types.Message):
    await handle_space_map(message, message.bot, message.chat.id)


# ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–º–ø–æ—Ä—Ç ...
from aiogram.types import URLInputFile, InlineKeyboardButton


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class NewsStates(StatesGroup):
    VIEWING_NEWS = State()


class AdminNewsStates(StatesGroup):
    ENTER_TEXT = State()
    ENTER_PHOTO = State()
    CONFIRMATION = State()


# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

# region News Section

async def get_news_list():
    conn = await get_db()
    try:
        return await conn.fetch("SELECT * FROM news ORDER BY created_at DESC")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []
    finally:
        await conn.close()




@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def handle_news(message: types.Message, state: FSMContext):
    async with ChatActionSender.typing(
            chat_id=message.chat.id,
            bot=message.bot
    ):
        news_list = await get_news_list()
    if not news_list:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
        return

    await state.set_state(NewsStates.VIEWING_NEWS)
    await state.update_data(news_list=news_list, current_index=0)
    await show_news(message.from_user.id, state)


async def show_news(user_id: int, state: FSMContext):
    data = await state.get_data()
    news_list = data['news_list']
    current_index = data['current_index']

    try:
        news_item = news_list[current_index]
        text = f"üì∞ *{news_item['text']}\n\n*{news_item['created_at'].strftime('%d.%m.%Y')}"

        builder = InlineKeyboardBuilder()
        if current_index < len(news_list) - 1:
            builder.button(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_news")
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="news_back_to_menu")

        send_method = bot.send_photo if news_item['photo'] else bot.send_message
        content = {
            'chat_id': user_id,
            'caption' if news_item['photo'] else 'text': text,
            'parse_mode': "Markdown",
            'reply_markup': builder.as_markup()
        }

        if news_item['photo']:
            if news_item['photo'].startswith(('http', 'https')):
                content['photo'] = URLInputFile(news_item['photo'])
            else:
                content['photo'] = news_item['photo']

        message = await send_method(**content)
        await state.update_data(last_message_id=message.message_id)

    except Exception as e:
        logger.error(f"News display error: {str(e)}")
        await bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.callback_query(NewsStates.VIEWING_NEWS, F.data == "prev_news")
async def prev_news(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']

    if current_index >= len(data['news_list']) - 1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å")
        return

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    await state.update_data(current_index=current_index + 1)
    await show_news(callback.from_user.id, state)
    await callback.answer()


@dp.callback_query(NewsStates.VIEWING_NEWS, F.data == "news_back_to_menu")
async def news_back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await callback.answer()


# endregion

# region Admin News Management

async def is_admin(user_id: int):
    conn = await get_db()
    try:
        user = await conn.fetchrow("SELECT role FROM users WHERE id = $1", user_id)
        return user and user['role'] == 'admin'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False
    finally:
        await conn.close()


@dp.message(Command("add_news"))
async def add_news_start(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await state.set_state(AdminNewsStates.ENTER_TEXT)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")


@dp.message(AdminNewsStates.ENTER_TEXT)
async def process_news_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(AdminNewsStates.ENTER_PHOTO)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")


@dp.message(AdminNewsStates.ENTER_PHOTO, F.photo)
async def process_news_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await state.set_state(AdminNewsStates.CONFIRMATION)
    await request_confirmation(message, state)


@dp.message(AdminNewsStates.ENTER_PHOTO, Command("skip"))
async def skip_news_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=None)
    await state.set_state(AdminNewsStates.CONFIRMATION)
    await request_confirmation(message, state)


async def request_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_news")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_news")

    text = f"üìù *–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:*\n{data['text']}\n\n"
    text += f"üñº *–§–æ—Ç–æ:* {'–µ—Å—Ç—å' if data.get('photo') else '–Ω–µ—Ç'}"

    if data.get('photo'):
        await message.answer_photo(
            photo=data['photo'],
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )


# region Improved News Management

async def send_news_to_user(user_id: int, news_item: asyncpg.Record):
    max_retries = 5
    backoff_factor = 0.5

    for attempt in range(max_retries):
        try:
            text = f"üì∞ *{news_item['created_at'].strftime('%d.%m.%Y %H:%M')}*\n\n{news_item['text']}"

            if news_item['photo']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑—É—è file_id –Ω–∞–ø—Ä—è–º—É—é
                await bot.send_photo(
                    chat_id=user_id,
                    photo=news_item['photo'],
                    caption=text,
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="Markdown"
                )
            return True

        except TelegramAPIError as e:
            wait_time = backoff_factor * (2 ** attempt)
            logger.warning(f"Retry {attempt + 1}/{max_retries} for user {user_id} in {wait_time:.1f}s")
            await asyncio.sleep(wait_time)

        except Exception as e:
            logger.error(f"Critical error for user {user_id}: {type(e).__name__} - {str(e)}")
            return False

    logger.error(f"Failed to send news to user {user_id} after {max_retries} attempts")
    return False


from aiogram.exceptions import TelegramBadRequest, TelegramAPIError


@dp.callback_query(AdminNewsStates.CONFIRMATION, F.data == "confirm_news")
async def confirm_news_publish(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    conn = await get_db()

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        if len(data['text']) > 4000:
            raise ValueError("Text too long (max 4000 chars)")

        news = await conn.fetchrow(
            """INSERT INTO news (admin_id, text, photo)
            VALUES ($1, $2, $3)
            RETURNING *""",
            callback.from_user.id,
            data['text'][:4000],  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            data.get('photo')[:512] if data.get('photo') else None  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã URL
        )

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        users = await conn.fetch("SELECT id FROM users WHERE NOT is_banned")
        semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

        async def send_task(user):
            async with semaphore:
                return await send_news_to_user(user['id'], news)

        results = await asyncio.gather(*[send_task(user) for user in users])

        success_count = sum(results)
        failed_count = len(results) - success_count

        status_message = (
            f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        report_text = status_message + f"\n\n–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:\n{data['text'][:300]}..."

        try:
            if data.get('photo'):
                await callback.message.edit_caption(caption=report_text)
            else:
                await callback.message.edit_text(text=report_text)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute(
            """INSERT INTO news_delivery_logs 
            (news_id, total_users, success_count) 
            VALUES ($1, $2, $3)""",
            news['id'], len(users), success_count
        )

    except ValueError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    except Exception as e:
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        logger.error(f"Publish error: {traceback.format_exc()}")
    finally:
        await conn.close()
        await state.clear()


# endregion

@dp.callback_query(AdminNewsStates.CONFIRMATION, F.data == "cancel_news")
async def cancel_news_publish(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.message.photo:
        await callback.message.edit_caption("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


class QuestStates(StatesGroup):
    CITY_INPUT = State()
    CONFIRMATION = State()
    QUEST_IN_PROGRESS = State()
    WAITING_PHOTO = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É"
@dp.message(F.text == "üó∫Ô∏è –ö–≤–µ—Å—Ç-—Ç—Ä–∏–ø –ø–æ –≥–æ—Ä–æ–¥—É")
async def start_quest(message: types.Message, state: FSMContext):
    await state.set_state(QuestStates.CITY_INPUT)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –ø—É—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏! üöÄ\n\n"
        "–¢–µ–±—è –∂–¥–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–ª–µ—á–Ω–æ–º—É –ø—É—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n\n"
        "–í–≤–µ–¥–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(QuestStates.CITY_INPUT)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)

    builder = InlineKeyboardBuilder()
    builder.button(text="üöÄ –ó–∞–ø—É—Å–∫", callback_data="start_quest_confirmed")

    await message.answer(
        f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ—Ö–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, —Ä–∞–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!\n"
        f"–ú—ã –ø–æ—Å–µ—Ç–∏–º 6 –º–µ—Å—Ç, —Ä–µ—à–∏–º 5 –∑–∞–≥–∞–¥–æ–∫ –∏ –≤–º–µ—Å—Ç–µ –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –∫–æ—Å–º–æ—Å —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞. "
        f"–ê –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Ç–µ–±—è –∂–¥–µ—Ç –ø–æ–¥–∞—Ä–æ–∫! –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QuestStates.CONFIRMATION)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞
@dp.callback_query(QuestStates.CONFIRMATION, F.data == "start_quest_confirmed")
async def start_quest_confirmed(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await send_quest_task(callback.message, state, task_number=1)
    await state.set_state(QuestStates.QUEST_IN_PROGRESS)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è
async def send_quest_task(message: types.Message, state: FSMContext, task_number: int):
    tasks = {
        1: {
            "text": "–û–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª! ‚Äì –ò –≤–æ—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\n\n"
                    "üóΩ –ó–∞–¥–∞–Ω–∏–µ 1: –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ü–∞–º—è—Ç–Ω–∏–∫\n\n"
                    "–ù–∞–π–¥–∏ –≤ –≥–æ—Ä–æ–¥–µ –ø–∞–º—è—Ç–Ω–∏–∫ –∏–ª–∏ –º–æ–Ω—É–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞–º–∏ –∏–ª–∏ —É—á–µ–Ω—ã–º–∏.",
            "button": "–ù–∞—à–µ–ª ‚úÖ"
        }
    }

    task = tasks.get(task_number)
    if not task:
        return await finish_quest(message, state)

    builder = ReplyKeyboardBuilder()
    builder.button(text=task["button"])

    await message.answer(
        task["text"],
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.update_data(current_task=task_number)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–µ–ª ‚úÖ"
@dp.message(F.text == "–ù–∞—à–µ–ª ‚úÖ", QuestStates.QUEST_IN_PROGRESS)
async def found_monument(message: types.Message, state: FSMContext):
    await state.set_state(QuestStates.WAITING_PHOTO)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É –ø–∞–º—è—Ç–Ω–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤—å –µ–µ –º–Ω–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å: "
        "¬´–ö—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ –ø–∞–º—è—Ç–Ω–∏–∫–µ –∏ —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –¥–ª—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏?¬ª",
        reply_markup=types.ReplyKeyboardRemove()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∞
@dp.message(QuestStates.WAITING_PHOTO, F.photo)
async def process_quest_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = await get_db()
    try:
        await conn.execute(
            "INSERT INTO quest_submissions "
            "(user_id, city, task_number, photo_id, answer, submission_time) "
            "VALUES ($1, $2, $3, $4, $5, $6)",
            message.from_user.id,
            data['city'],
            data['current_task'],
            message.photo[-1].file_id,
            message.caption or "",
            datetime.now()
        )

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        await conn.execute(
            "UPDATE users SET points = points + 10 WHERE id = $1",
            message.from_user.id
        )
    finally:
        await conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(message, state)

    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∫–≤–µ—Å—Ç–∞!\n"
        "–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ...",
        reply_markup=main_menu_kb()
    )
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
async def notify_admins(message: types.Message, state: FSMContext):
    data = await state.get_data()  # –¢–µ–ø–µ—Ä—å state –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

    conn = await get_db()
    try:
        admins = await conn.fetch(
            "SELECT id FROM users WHERE role = 'admin'"
        )

        report_text = (
            "üö® –ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"  # –ë–µ—Ä–µ–º city –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            f"üì∑ –§–æ—Ç–æ: {message.photo[-1].file_id}"
        )

        for admin in admins:
            try:
                await bot.send_photo(
                    chat_id=admin['id'],
                    photo=message.photo[-1].file_id,
                    caption=report_text
                )
            except Exception as e:
                logger.error(f"Error sending to admin {admin['id']}: {e}")

    finally:
        await conn.close()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
async def finish_quest(message: types.Message, state: FSMContext):
    await message.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–µ—Å—Ç-—Ç—Ä–∏–ø!\n"
        "–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫: +50 –±–∞–ª–ª–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å!\n"
        "–°–ª–µ–¥—É—é—â–∏–π –∫–≤–µ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ...",
        reply_markup=main_menu_kb()
    )
    await state.clear()








quiz_categories = {
    "satellites": {
        "title": "üõ∞ –°–ø—É—Ç–Ω–∏–∫–∏ –∏ –º–∏—Å—Å–∏–∏",
        "questions": [
            {
                "question": "–ö–∞–∫–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º–∞–ª—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ó–µ–º–ª–∏?",
                "options": ["1Ô∏è‚É£ –†–æ—Å–∫–æ—Å–º–æ—Å", "2Ô∏è‚É£ SR Space", "3Ô∏è‚É£ –°–∫–æ–ª–∫–æ–≤–æ.", "4Ô∏è‚É£ Glavkosmos."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ SR Space \n SR Space —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            },
            {
                "question": "–ö–∞–∫–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –≤ 1990 –≥–æ–¥—É, —Å—Ç–∞–ª —Å–∏–º–≤–æ–ª–æ–º –≥–ª—É–±–æ–∫–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π?",
                "options": ["1Ô∏è‚É£ –ö–µ–ø–ª–µ—Ä", "2Ô∏è‚É£ –•–∞–±–±–ª", "3Ô∏è‚É£ –î–∂–µ–π–º—Å –£—ç–±–±.", "4Ô∏è‚É£ –ß–∞–Ω–¥—Ä–∞."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –•–∞–±–±–ª \n –•–∞–±–±–ª –¥–æ —Å–∏—Ö –ø–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–π."
            },
            {
                "question": "–ö–∞–∫–∞—è –º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∏–ª–∞ –ø–µ—Ä–≤—ã—Ö –ª—é–¥–µ–π –Ω–∞ –õ—É–Ω—É –≤ 1969 –≥–æ–¥—É?",
                "options": ["1Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-11", "2Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-13", "3Ô∏è‚É£ –í–æ—è–¥–∂–µ—Ä-1.", "4Ô∏è‚É£ –ú–∞—Ä–∏–Ω–µ—Ä-10."],
                "correct": 0,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1Ô∏è‚É£ –ê–ø–æ–ª–ª–æ–Ω-11 \n –ê–ø–æ–ª–ª–æ–Ω-11 —Å—Ç–∞–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ä—ã–≤–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –ª—É–Ω—ã –∏ –∫–æ—Å–º–æ—Å–∞."
            }
        ]
    },
    "ecology": {
        "title": "üåç –ó–µ–º–ª—è –∏ —ç–∫–æ–ª–æ–≥–∏—è",
        "questions": [
            {
                "question": " –ö–∞–∫–æ–π –≥–∞–∑ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∏–Ω–æ–≤–Ω–∏–∫–æ–º –ø–∞—Ä–Ω–∏–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞?",
                "options": ["1Ô∏è‚É£ –ö–∏—Å–ª–æ—Ä–æ–¥", "2Ô∏è‚É£ –ê–∑–æ—Ç", "3Ô∏è‚É£ –£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑.", "4Ô∏è‚É£ –í–æ–¥–æ—Ä–æ–¥."],
                "correct": 2,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ \n –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ CO‚ÇÇ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—é."
            },
            {
                "question": "–ö–∞–∫—É—é —Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, SR Space, –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ?",
                "options": ["1Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–æ–¥—è—Ç —Å–æ–ª–Ω–µ—á–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é", "2Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –ª–µ—Å–Ω—ã–µ –ø–æ–∂–∞—Ä—ã", "3Ô∏è‚É£ –ú–æ–¥–µ–ª–∏—Ä—É—é—Ç –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä—è—é—Ç –≥–ª—É–±–∏–Ω—É –æ–∫–µ–∞–Ω–æ–≤."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –ª–µ—Å–Ω—ã–µ –ø–æ–∂–∞—Ä—ã \n –¢–∞–∫–∏–µ —Å–ø—É—Ç–Ω–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–æ—Å–∞—Ö CO‚ÇÇ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∞–≥–æ–≤ –ø–æ–∂–∞—Ä–æ–≤."
            },
            {
            "question": " –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º?",
                "options": ["1Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã", "2Ô∏è‚É£ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."],
                "correct": 2,
                "explanation": "‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ \n –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ NDVI, –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –≤–µ–≥–µ—Ç–∞—Ü–∏–∏."
            }
        ]
    },
     "rokets": {
        "title": "üöÄ –†–∞–∫–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "questions": [
            {
                "question": " –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞–∫–µ—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π SpaceX?",
                "options": ["1Ô∏è‚É£ Falcon 1", "2Ô∏è‚É£ Falcon 9", "3Ô∏è‚É£ Falcon Heavy.", "4Ô∏è‚É£ Starship."],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ Falcon 9 \n –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ—Å—Ç—å Falcon 9 –ø–æ–∑–≤–æ–ª–∏–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–ø—É—Å–∫–∏."
            },
            {
                "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∫–µ—Ç–∞-–Ω–æ—Å–∏—Ç–µ–ª—å, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π SR Space –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞–ª—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Ä–±–∏—Ç—É?",
                "options": ["1Ô∏è‚É£ –°–®–ê", "2Ô∏è‚É£ –°–°–°–†", "3Ô∏è‚É£ –ö–∏—Ç–∞–π", "4Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2Ô∏è‚É£ –°–°–°–† \n –°–°–°–† –ª–∏–¥–∏—Ä–æ–≤–∞–ª –≤ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–∫–µ—Ç–æ—Å—Ç—Ä–æ–µ–Ω–∏—è."
            },
            {
            "question": " –ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –ø–µ—Ä–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –º–µ–∂–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—É—é –±–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∫–µ—Ç—É?",
                "options": ["1Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã", "2Ô∏è‚É£ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ.", "4Ô∏è‚É£ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."],
                "correct": 2,
                "explanation": "‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª–µ—Å–Ω–æ–º –ø–æ–∫—Ä–æ–≤–µ \n –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ NDVI, –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –≤–µ–≥–µ—Ç–∞—Ü–∏–∏."
            }
        ]
    }
}


@dp.message(F.text == "üéì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ—Å–º–æ—Å–µ")
async def start_quiz(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if data.get('used_categories'):
        await message.answer("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞—á–∞–ª–∞!")
        return

    await state.update_data(
        used_categories=[],
        current_category=None,
        last_message_id=None
    )
    await show_category_selection(message, state)


async def show_category_selection(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.chat.id
    completed = await QuizManager.get_completed_categories(user_id)
    used_categories = data.get('used_categories', [])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ used_categories
    print(f"show_category_selection: User ID from message: {user_id}")
    print(f"[DEBUG] Completed categories: {completed}")

    builder = InlineKeyboardBuilder()

    for category_id, category in quiz_categories.items():
        is_used = category_id in used_categories
        is_completed = category_id in completed
        print(f"[DEBUG] Category {category_id} completed: {is_completed}")

        safe_category_id = category_id.replace(" ", "_").lower()

        button_text = f"{'‚úÖ ' if is_completed else ''}{category['title']}"

        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"cat_{safe_category_id}" if not is_used else "ignore", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID
            )
        )

    # builder.row(types.InlineKeyboardButton(
    #     text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    #     callback_data="back_to_main"
    # ))


    builder.adjust(1)

    try:
        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" + ("\n\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã" if data.get('used_categories') else "")

        if data.get('last_message_id'):
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=text,
                reply_markup=builder.as_markup()
            )
        else:
            msg = await message.answer(text, reply_markup=builder.as_markup())
            await state.update_data(last_message_id=msg.message_id)

        if not builder.buttons:
            text = "üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"

        await state.set_state(QuizStates.CATEGORY_SELECTION)

    except Exception as e:
        logger.error(f"Error showing categories: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

@dp.callback_query(F.data == "ignore")
async def handle_ignore(callback: types.CallbackQuery):
    await callback.answer("üö´ –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –Ω–∞—á–∞—Ç–∞!", show_alert=True)

@dp.callback_query(QuizStates.ANSWERING_QUESTION, F.data.startswith("ans_"))
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data['current_category']
        question_index = data['current_question_index']

        category = quiz_categories[category_id]
        questions = category["questions"]
        question = questions[question_index]

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.error(f"Error removing buttons: {str(e)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        selected_answer = int(callback.data.split("_")[1])
        is_correct = selected_answer == question["correct"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
        if is_correct:
            conn = await get_db()
            try:
                await conn.execute(
                    "UPDATE users SET points = points + 1 WHERE id = $1",
                    callback.from_user.id
                )
            finally:
                await conn.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        explanation = (
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª üéâ\n{question['explanation']}"
            if is_correct else
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct']]}\n{question['explanation']}"
        )
        await callback.message.answer(explanation)

        new_question_index = question_index + 1
        await state.update_data(current_question_index=new_question_index)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if new_question_index < len(questions):
            await ask_current_question(callback.message, state)
        else:
            await complete_category(callback.message, state)

        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling answer: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")


async def get_user_points(user_id: int) -> int:
    conn = await get_db()
    try:
        result = await conn.fetchval(
            "SELECT points FROM users WHERE id = $1",
            user_id
        )
        return result or 0
    finally:
        await conn.close()


async def complete_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get('current_category')

    await state.update_data(
        used_categories=[],
        current_category=None  # –í–∞–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    )

    if category_id:
        await QuizManager.complete_category(message.chat.id, category_id)

    await show_category_selection(message, state)


@dp.message(Command("resetquiz"))
async def resetquiz_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    conn = await get_db()
    user = await conn.fetchrow(
        "SELECT role FROM users WHERE id = $1",
        message.from_user.id
    )

    if not user or user['role'] != 'admin':
        return await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

    await QuizManager.reset_all_progress()
    await message.answer("‚ôª –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω!")


# @dp.callback_query(QuizStates.CATEGORY_SELECTION, F.data.startswith("cat_"))
# async def select_category(callback: types.CallbackQuery, state: FSMContext):
#     try:
#         # –î–µ–∫–æ–¥–∏—Ä—É–µ–º category_id
#         encoded_category = callback.data.split("_", 1)[1]
#         category_id = urllib.parse.unquote_plus(encoded_category)
#
#         logger.debug(f"Selected category ID: {category_id}")
#
#         if category_id not in quiz_categories:
#             logger.error(f"Category {category_id} not found in quiz_categories")
#             await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
#             return
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         await state.update_data(
#             current_category=category_id,
#             current_question_index=0,
#             last_message_id=None
#         )
#
#         # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         try:
#             await callback.message.delete()
#         except Exception as e:
#             logger.error(f"Error deleting message: {e}")
#
#         # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
#         await ask_current_question(callback.message, state)
#         await callback.answer()
#
#     except Exception as e:
#         logger.error(f"Error in select_category: {str(e)}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def ask_first_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = quiz_categories[data['current_category']]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(category["questions"][0]["options"]):
        builder.button(text=option, callback_data=f"ans_{i}")

    builder.adjust(1)

    msg = await message.answer(
        f"üìö {category['title']}\n\n"
        f"‚ùì {category['questions'][0]['question']}",
        reply_markup=builder.as_markup()
    )
    await state.update_data(
        question_index=0,
        last_message_id=msg.message_id
    )
    await state.set_state(QuizStates.ANSWERING_QUESTION)


async def ask_current_question(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data['current_category']
        question_index = data['current_question_index']

        category = quiz_categories[category_id]
        questions = category["questions"]

        if question_index >= len(questions):
            await complete_category(message, state)
            return

        question = questions[question_index]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, option in enumerate(question["options"]):
            builder.button(text=option, callback_data=f"ans_{i}")
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        text = (
            f"üìö {category['title']}\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å {question_index + 1}/{len(questions)}:\n"
            f"{question['question']}"
        )

        msg = await message.answer(text, reply_markup=builder.as_markup())
        await state.update_data(last_message_id=msg.message_id)
        await state.set_state(QuizStates.ANSWERING_QUESTION)

    except Exception as e:
        logger.error(f"Error asking question: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query(F.data.startswith("cat_"))
async def handle_category_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º category_id
        encoded_category = callback.data.split("_", 1)[1]
        category_id = urllib.parse.unquote_plus(encoded_category)
        completed = await QuizManager.get_completed_categories(callback.from_user.id)

        data = await state.get_data()
        used_categories = data.get('used_categories', [])
        print(f"User ID from message: {callback.from_user.id}")

        logger.info(f"Selected category: {category_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id in completed:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            return

        if category_id not in quiz_categories:
            await callback.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if used_categories:
            await callback.answer("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(QuizStates.ANSWERING_QUESTION)
        await state.update_data(
            current_category=category_id,
            current_question_index=0,
            used_categories=[category_id]
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await ask_current_question(callback.message, state)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in category selection: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


class QuizManager:
    @staticmethod
    async def get_completed_categories(user_id: int) -> set:
        conn = await get_db()
        result = await conn.fetch(
            "SELECT category_id FROM completed_categories WHERE user_id = $1",
            user_id
        )
        return {row['category_id'] for row in result}

    @staticmethod
    async def complete_category(user_id: int, category_id: str):
        conn = await get_db()
        await conn.execute(
            """INSERT INTO completed_categories (user_id, category_id)
               VALUES ($1::BIGINT, $2::VARCHAR)
               ON CONFLICT DO NOTHING""",
            user_id, category_id
        )

    @staticmethod
    async def reset_all_progress():
        conn = await get_db()
        await conn.execute("TRUNCATE TABLE completed_categories")

@dp.message()
async def unknown_message(message: types.Message):
    logger.warning(f"Unhandled message: {message.text}")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")


async def main():
    conn = await get_db()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username VARCHAR(255),
                points INTEGER DEFAULT 0
            )
        ''')
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É quest_submissions
        await conn.execute('''
                    CREATE TABLE IF NOT EXISTS quest_submissions (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        city TEXT,
                        task_number INTEGER,
                        photo_id TEXT,
                        answer TEXT,
                        submission_time TIMESTAMP
                    )
                ''')
        # –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await conn.execute('''CREATE TABLE IF NOT EXISTS completed_categories
             (user_id INTEGER, 
              category_id TEXT,
              PRIMARY KEY (user_id, category_id))''')
    finally:
        await conn.close()

    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())